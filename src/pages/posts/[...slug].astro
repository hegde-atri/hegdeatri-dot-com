---
import PostLayout from "../../layouts/PostLayout.astro";
import { Icon } from "astro-icon";
import { getReadingTime } from "../../lib/readingTime";

export async function getStaticPaths() {
  let allPosts = await Astro.glob("../../content/posts/**/*.md*");
  const posts = allPosts.filter((post) => !post.frontmatter.draft);
  return posts.map((post) => {
    return {
      params: { slug: post.frontmatter.slug },
      props: { ...post },
    };
  });
}

function formatDate(date: Date) {
  return new Date(date).toUTCString().replace(/(\d\d\d\d) .*/, "$1");
}

const { Content, frontmatter, compiledContent } = Astro.props;
const title = frontmatter.title;
const description = frontmatter.description ?? "A post about " + title;
const image = frontmatter.image;
const keywords = frontmatter.keywords;
const comments = frontmatter.comments ?? true;
---

<PostLayout title={title} description={description} comments={comments} image={image} keywords={keywords}>
  <div
    class="bg-foreground-300 dark:bg-background-light rounded-md px-3 py-0.5 text-background dark:text-background-200"
  >
    <div class="flex flex-row justify-between">
      {
        frontmatter.pubDate === frontmatter.date ? (
          <p class="flex items-center">
            <Icon name="ic:baseline-calendar-month" height="25" />
            <span class="pl-1">{formatDate(frontmatter.pubDate)}</span>
          </p>
        ) : (
          <span class="flex">
            <p class="flex items-center">
              <Icon name="ic:outline-update" height="25" />
              <span class="pl-1">{formatDate(frontmatter.date)}</span>
            </p>
            <p class="flex pl-5 text-background-400 items-center">
              <Icon name="ic:baseline-calendar-month" height="25" />
              <span class="pl-1">{formatDate(frontmatter.pubDate)}</span>
            </p>
          </span>
        )
      }
      <p class="flex items-center">
        <Icon name="mdi:alarm-clock" height="25" />
        <span class="pl-1">{getReadingTime(compiledContent())} minutes</span>
      </p>
    </div>
    <div class="flex flex-wrap mb-2">
      {frontmatter.tags.map((tag: String)=> {
        return (
          <p class="mx-1 my-2 bg-foreground-500 cursor-pointer dark:bg-background-lighter 
          hover:bg-foreground-700 hover:dark:bg-background-800 px-2 rounded-md transition duration-300">
            <a href={`/tags/${tag}`} class="no-underline text-white dark:text-foreground-50">{tag[0].toUpperCase() + tag.slice(1)}</a>
            </p>
        )
      })}
    </div>
  </div>
  <Content />
</PostLayout>
